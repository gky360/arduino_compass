module Compass
open(Prelude, Vector, Math)

let am = SparkFunLSM303C:make(
        -1.0, -1.0, -1.0,
        1.0, 1.0, 1.0)
let amState = SparkFunLSM303C:state()

let ringPin = 9
let ringSize = 16
let ringType = Neopixel:GRB + Neopixel:KHZ800
let ringStrip = Neopixel:make(ringSize, ringPin, ringType)

type ringMode = red | green | blue | black
let mode = ref red()
type angleType = degree of int32
           | level
type neoidxType = neoidx of int32
                | neoall

fun modeToColor(m) =
    case m of
    | red() => Neopixel:makeColor(255, 0, 0)
    | green() => Neopixel:makeColor(0, 255, 0)
    | blue() => Neopixel:makeColor(0, 0, 255)
    | black() => Neopixel:makeColor(0, 0, 0)
    end

fun round32(val : double) : int32 = (
    let mutable ret = 0i32;
    #ret = (int32_t)(val + 0.5);#;
    ret
)

fun calcAccAngle(amXYZ : (vector<double;3>*vector<double;3>)) : angleType = (
    let (accXYZ, magXYZ) = amXYZ;
    let accX = Vector:get<double;3>(0, accXYZ);
    let accY = Vector:get<double;3>(1, accXYZ);
    let r = sqrt_(accX * accX + accY * accY);
    if r < 50.0 then
        level()
    else
        degree((round32(radToDeg(atan2_(accY / r, accX / r))) + 180) mod 360)
    end
)

fun calcNeoidx(ang : angleType) : neoidxType = (
    case ang of
    | level() => neoall()
    | degree(deg) => neoidx(((-deg + 270 + 360) mod 360) * 2 / 45)
    end
)

fun displayAccAngle(idx : neoidxType) : unit = (
    case idx of
    | neoall() => (
        for i in 0 to ringSize - 1 do
            Neopixel:setPixelColor(i, modeToColor(green()), ringStrip)
        end)
    | neoidx(x) => (
        for i in 0 to ringSize - 1 do
            if i == x then
                Neopixel:setPixelColor(i, modeToColor(blue()), ringStrip)
            else
                Neopixel:setPixelColor(i, modeToColor(black()), ringStrip)
            end
        end)
    end;
    Neopixel:show(ringStrip)
)

fun setup() = (
    SparkFunLSM303C:begin(am);
    Neopixel:begin(ringStrip)
)

fun main() = (
    setup();
    while true do (
        let amSig = SparkFunLSM303C:getSignal(40, am, amState);
        let angleSig = Signal:map<(vector<double;3>*vector<double;3>), angleType>(
            fn (amXYZ) -> calcAccAngle(amXYZ) end,
            amSig
        );
        let neoidxSig = Signal:map<angleType, neoidxType>(
            fn (ang) -> calcNeoidx(ang) end,
            angleSig
        );
        Signal:sink(
            fn (idx) -> displayAccAngle(idx) end,
            neoidxSig
        )
    ) end
)

